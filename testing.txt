A problem we were not able to solve directly was using the unittest module together with asyncio. In order to test the client-server connection with unittest, both the client and the server would have to be started by the test script. We tried to find a solution for example by using threading, or async-functions, but unittest does not accept coroutines. By searching for how to solve this, we know it can be done with some wrapper functions and threading, or by making changes to unittest, but we decided instead to not use unittest for the parts of out code which involves async. However, we could use unittest for a large part of our code: the functions on the server, both the general ones (login and register) and the user specific ones (such as list, read_file, write_file etc.)

Since we could not test the actual client-server connection with unittest, this is were we decided to use assert statements. We have assert tests in both the client and server files, which check that the other one's IP-address and TCP-port have reasonable values, and which confirm that StreamReader and StreamWriter have been assigned properly. If there is a problem with the connection, it can be caught by these assert statements.